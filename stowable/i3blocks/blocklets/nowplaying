#!/usr/bin/perl
#
# Copyright (C) 2014 Tony Crisci <tony@dubstepdish.com>
# Copyright (C) 2015 Thiago Perrotta <perrotta dot thiago at poli dot ufrj dot br>
#
# Licensed under the terms of the GNU GPL v3, or any later version.

# Requires playerctl binary to be in your path (except cmus)
# See: https://github.com/acrisci/playerctl

# Set instance=NAME in the i3blocks configuration to specify a music player
# (playerctl will attempt to connect to org.mpris.MediaPlayer2.[NAME] on your
# DBus session).

use Time::HiRes qw(usleep);
use Env qw(BLOCK_INSTANCE);
use Env qw(LABEL);

use constant DELAY => 50; # Delay in ms to let network-based players (spotify) reflect new data.
use constant SPOTIFY_STR => 'spotify';

my @metadata = ();
my $player_arg = "";

if ($BLOCK_INSTANCE) {
    $player_arg = "--player='$BLOCK_INSTANCE'";
}

sub buttons {
    my $method = shift;

    if($method eq 'mpd') {
        if ($ENV{'BLOCK_BUTTON'} == 1) {
            system("mpc prev");
        } elsif ($ENV{'BLOCK_BUTTON'} == 2) {
            system("mpc toggle");
        } elsif ($ENV{'BLOCK_BUTTON'} == 3) {
            system("mpc next");
        } elsif ($ENV{'BLOCK_BUTTON'} == 4) {
            system("mpc volume +10");
        } elsif ($ENV{'BLOCK_BUTTON'} == 5) {
            system("mpc volume -10");
        }
    } elsif ($method eq 'cmus') {
        if ($ENV{'BLOCK_BUTTON'} == 1) {
            system("cmus-remote --prev");
        } elsif ($ENV{'BLOCK_BUTTON'} == 2) {
            system("cmus-remote --pause");
        } elsif ($ENV{'BLOCK_BUTTON'} == 3) {
            system("cmus-remote --next");
        }
    } elsif ($method eq 'playerctl') {
        if ($ENV{'BLOCK_BUTTON'} == 1) {
            system("playerctl $player_arg previous");
            usleep(DELAY * 1000) if $BLOCK_INSTANCE eq SPOTIFY_STR;
        } elsif ($ENV{'BLOCK_BUTTON'} == 2) {
            system("playerctl $player_arg play-pause");
        } elsif ($ENV{'BLOCK_BUTTON'} == 3) {
            system("playerctl $player_arg next");
            usleep(DELAY * 1000) if $BLOCK_INSTANCE eq SPOTIFY_STR;
        } elsif ($ENV{'BLOCK_BUTTON'} == 4) {
            system("playerctl $player_arg volume 0.01+");
        } elsif ($ENV{'BLOCK_BUTTON'} == 5) {
            system("playerctl $player_arg volume 0.01-");
        }
    } elsif ($method eq 'rhythmbox') {
        if ($ENV{'BLOCK_BUTTON'} == 1) {
            system("rhythmbox-client --previous");
        } elsif ($ENV{'BLOCK_BUTTON'} == 2) {
            system("rhythmbox-client --play-pause");
        } elsif ($ENV{'BLOCK_BUTTON'} == 3) {
            system("rhythmbox-client --next");
        }
    }
}

sub cmus {
    my @cmus = split /^/, qx(cmus-remote -Q);
    if ($? == 0) {
        foreach my $line (@cmus) {
            my @data = split /\s/, $line;
            if (shift @data eq 'tag') {
                my $key = shift @data;
                my $value = join ' ', @data;

                @metadata[0] = $value if $key eq 'artist';
                @metadata[1] = $value if $key eq 'title';
            }
        }

        if (@metadata) {
            buttons('cmus');

            return join(' - ', @metadata);
        }
    }
}

sub mpd {
    my $data = qx(mpc current);

    buttons("mpd") if not $data eq '';
    return $data;
}

sub playerctl {
    buttons('playerctl');

    my $artist = qx(playerctl $player_arg metadata artist);
    chomp $artist;
    # exit status will be nonzero when playerctl cannot find your player
    return if $? || $artist eq '(null)';

    push(@metadata, $artist) if $artist;

    my $title = qx(playerctl $player_arg metadata title);
    return if $? || $title eq '(null)';

    push(@metadata, $title) if $title;

    return join(" - ", @metadata) if @metadata;
}

sub rhythmbox {
    buttons('rhythmbox');

    return qx(rhythmbox-client --print-playing --no-start);
}

sub run {
    if ($player_arg =~ /mpd/) {
        return mpd;
    }

    if ($player_arg =~ /cmus/) {
        return cmus;
    }

    if ($player_arg =~ /rhythmbox/) {
        return rhythmbox;
    }

    return playerctl;
}

if ($RETVAL = run) {
    print("${LABEL}${RETVAL}\n");
} else {
    print("\n");
}
