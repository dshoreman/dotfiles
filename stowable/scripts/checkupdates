#!/usr/bin/env bash

main() {
    simplecheck Repo n
    simplecheck AUR m
    gitcheck
}

simplecheck() {
    header "${1} Packages"
    pacaur -Qu "-${2}"
    echo
}

gitcheck() {
    local package version src branch

    header "AUR (Git) Packages"
    mkdir -p /tmp/aurcheck-git
    cd /tmp/aurcheck-git

    while read -r package version; do
        if grep -qv '\-git$' <<< "$package"; then
            # Skipping -git package
            continue
        fi

        echo "Checking updates for ${package} (Installed: ${version})"
        fetch_metadata
        if check_sources; then
            echo -e "Skipping commit check, no branch defined.\n"
            continue
        fi

        find_latest_commit
        echo
    done <<< "$(pacaur -Qm)"
}

fetch_metadata() {
    echo "Fetching package SRCINFO..."
    curl -so "${package}.PKGBUILD" "https://aur.archlinux.org/cgit/aur.git/plain/.SRCINFO?h=${package}"
}

check_sources() {
    echo -n "Checking sources... "
    read -r src branch <<< "$(grep -m 1 'source = ' "${package}.PKGBUILD" | parse_ghurl)"
    echo "Found Github repo: ${src} (Branch: ${branch:-unset})"

    [ -z "$branch" ]
}

find_latest_commit() {
    echo -n "Checking for latest commit... "
    hash=$(curl -s "https://api.github.com/repos/${src}/git/refs/heads/${branch}" | jq -r '.object.sha')
    echo "Found ${hash:0:8}"
}

header() {
    echo "----------------------------------------"
    echo " $1"
    echo "----------------------------------------"
}

parse_ghurl() {
    sed -e 's/.*github.com\///g' -e 's/\(\.git$\|\(\.git\)\?\#branch=\)/ /g'
}

main

# vi: set ff=sh
